<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp">

    <!--Menu button-->
    <Style x:Key="menuButton" TargetType="RadioButton">
        <!--Normal button style-->
        <Setter Property="Height" Value="50"/>
        <Setter Property="Margin" Value="-5,0,0,5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource color19}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="4,0,0,0"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Button Style on hover-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{StaticResource color12}"/>
                <Setter Property="Foreground" Value="{StaticResource color19}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
            <!--Activated button style-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{StaticResource color12}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Menu button icon-->
    <Style x:Key="menuButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="35,0,20,0"/>
    </Style>

    <!--Menu button text-->
    <Style x:Key="menuButtonText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!--Sidebar dropdown toggle button-->
    <Style x:Key="DropdownToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}" 
                            CornerRadius="5" 
                            Padding="{TemplateBinding Padding}">
                        <Grid>
                            <!-- Icon Path (Arrow) -->
                            <Path x:Name="Arrow" 
                                  Data="M 0,0 L 10,5 L 0,10 Z"
                                  Fill="{TemplateBinding Foreground}" 
                                  Stretch="Uniform" 
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Trigger for Checked State -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" 
                                    Property="Data" 
                                    Value="M 0,0 L 5,10 L 10,0 Z" />
                            <!-- Downward arrow -->
                        </Trigger>
                        <!-- Hover Effect -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#1F2937" />
                            <Setter Property="Foreground" Value="#D1D5DB" />
                        </Trigger>
                        <!-- Pressed Effect -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#4B5563" />
                            <Setter Property="Foreground" Value="#F3F4F6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Control bar button-->
    <Style x:Key="controlButton" TargetType="Button">
        <!--Normal button style-->
        <Setter Property="Width" Value="35"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource color17}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Button Style on hover-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource color11}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--Menu button icon-->
    <Style x:Key="controlButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="9"/>
        <Setter Property="Height" Value="9"/>
    </Style>
    
    <!--Icon button-->
    <Style x:Key="iconButton" TargetType="Button">
        <!--Normal button style-->
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource panelActiveColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Button Style on hover-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--Menu button icon-->
    <Style x:Key="iconButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
    </Style>

    <Style x:Key="button" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Width" Value="170" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#FDFEFE" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border Background="{TemplateBinding Background}" CornerRadius="25" BorderBrush="White" Padding="15" BorderThickness="1" >
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="#e8e8e8" />
                <Setter Property="Foreground" Value="#0e2e6e" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True" >
                <Setter Property="Background" Value="#d9d9d9" />
                <Setter Property="Foreground" Value="DimGray" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="buttonCircle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="8 0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border Background="{TemplateBinding Background}" CornerRadius="30" BorderBrush="#878787" Padding="15" BorderThickness="1" >
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="#d9d9d9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True" >
                <Setter Property="Background" Value="#c4c4c4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="commandButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="8 0" />
        <Setter Property="FontFamily" Value="Montserrat" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border Background="{TemplateBinding Background}" CornerRadius="30" BorderBrush="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=Button}}" Padding="15" BorderThickness="1" >
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}" />
                <Setter Property="Foreground" Value="{StaticResource color19}" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True" >
                <Setter Property="Background" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}" />
                <Setter Property="Foreground" Value="{StaticResource color19}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Back button-->
    <Style x:Key="backButton" TargetType="Button">
        <!--Normal button style-->
        <Setter Property="Width" Value="35"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource plainTextColor3}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                        CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Button Style on hover-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource panelActiveColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>